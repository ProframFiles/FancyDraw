#include "akjSDLUtils.hpp"
#include "SDL.h"
#include "SDL_syswm.h"

namespace akj{
	namespace SDL{
		#define ENUM_TO_STRING_CASE(e_type) case e_type: return #e_type;
		const char* EventTypeToString(uint32_t event_type)
		{
			switch (event_type)
			{
				ENUM_TO_STRING_CASE(SDL_FIRSTEVENT)
				ENUM_TO_STRING_CASE(SDL_QUIT)
				ENUM_TO_STRING_CASE(SDL_APP_TERMINATING)
				ENUM_TO_STRING_CASE(SDL_APP_LOWMEMORY)
				ENUM_TO_STRING_CASE(SDL_APP_WILLENTERBACKGROUND)
				ENUM_TO_STRING_CASE(SDL_APP_DIDENTERBACKGROUND)
				ENUM_TO_STRING_CASE(SDL_APP_WILLENTERFOREGROUND)
				ENUM_TO_STRING_CASE(SDL_APP_DIDENTERFOREGROUND)
				ENUM_TO_STRING_CASE(SDL_WINDOWEVENT)
				ENUM_TO_STRING_CASE(SDL_SYSWMEVENT)
				ENUM_TO_STRING_CASE(SDL_KEYDOWN)
				ENUM_TO_STRING_CASE(SDL_KEYUP)
				ENUM_TO_STRING_CASE(SDL_TEXTEDITING)
				ENUM_TO_STRING_CASE(SDL_TEXTINPUT)
				ENUM_TO_STRING_CASE(SDL_MOUSEMOTION)
				ENUM_TO_STRING_CASE(SDL_MOUSEBUTTONDOWN)
				ENUM_TO_STRING_CASE(SDL_MOUSEBUTTONUP)
				ENUM_TO_STRING_CASE(SDL_MOUSEWHEEL)
				ENUM_TO_STRING_CASE(SDL_JOYAXISMOTION)
				ENUM_TO_STRING_CASE(SDL_JOYBALLMOTION)
				ENUM_TO_STRING_CASE(SDL_JOYHATMOTION)
				ENUM_TO_STRING_CASE(SDL_JOYBUTTONDOWN)
				ENUM_TO_STRING_CASE(SDL_JOYBUTTONUP)
				ENUM_TO_STRING_CASE(SDL_JOYDEVICEADDED)
				ENUM_TO_STRING_CASE(SDL_JOYDEVICEREMOVED)
				ENUM_TO_STRING_CASE(SDL_CONTROLLERAXISMOTION)
				ENUM_TO_STRING_CASE(SDL_CONTROLLERBUTTONDOWN)
				ENUM_TO_STRING_CASE(SDL_CONTROLLERBUTTONUP)
				ENUM_TO_STRING_CASE(SDL_CONTROLLERDEVICEADDED)
				ENUM_TO_STRING_CASE(SDL_CONTROLLERDEVICEREMOVED)
				ENUM_TO_STRING_CASE(SDL_CONTROLLERDEVICEREMAPPED)
				ENUM_TO_STRING_CASE(SDL_FINGERDOWN)
				ENUM_TO_STRING_CASE(SDL_FINGERUP)
				ENUM_TO_STRING_CASE(SDL_FINGERMOTION)
				ENUM_TO_STRING_CASE(SDL_DOLLARGESTURE)
				ENUM_TO_STRING_CASE(SDL_DOLLARRECORD)
				ENUM_TO_STRING_CASE(SDL_MULTIGESTURE)
				ENUM_TO_STRING_CASE(SDL_CLIPBOARDUPDATE)
				ENUM_TO_STRING_CASE(SDL_DROPFILE)
				ENUM_TO_STRING_CASE(SDL_USEREVENT)
				ENUM_TO_STRING_CASE(SDL_LASTEVENT)
			}
			return "";
		}
		const char* WindowEventTypeToString(uint32_t event_type)
		{
			switch (event_type)
			{
				ENUM_TO_STRING_CASE(SDL_WINDOWEVENT_NONE)
				ENUM_TO_STRING_CASE(SDL_WINDOWEVENT_SHOWN)
				ENUM_TO_STRING_CASE(SDL_WINDOWEVENT_HIDDEN)
				ENUM_TO_STRING_CASE(SDL_WINDOWEVENT_EXPOSED)
				ENUM_TO_STRING_CASE(SDL_WINDOWEVENT_MOVED)
				ENUM_TO_STRING_CASE(SDL_WINDOWEVENT_RESIZED)
				ENUM_TO_STRING_CASE(SDL_WINDOWEVENT_SIZE_CHANGED)
				ENUM_TO_STRING_CASE(SDL_WINDOWEVENT_MINIMIZED)
				ENUM_TO_STRING_CASE(SDL_WINDOWEVENT_MAXIMIZED)
				ENUM_TO_STRING_CASE(SDL_WINDOWEVENT_RESTORED)
				ENUM_TO_STRING_CASE(SDL_WINDOWEVENT_ENTER)
				ENUM_TO_STRING_CASE(SDL_WINDOWEVENT_LEAVE)
				ENUM_TO_STRING_CASE(SDL_WINDOWEVENT_FOCUS_GAINED)
				ENUM_TO_STRING_CASE(SDL_WINDOWEVENT_FOCUS_LOST)
				ENUM_TO_STRING_CASE(SDL_WINDOWEVENT_CLOSE)
			default:
				break;
			}
			return "";
		}


		#undef ENUM_TO_STRING_CASE

		void* GetWindowHandle(SDL_Window* window)
		{
			SDL_SysWMinfo info = { 0 };
			if (SDL_GetWindowWMInfo(window, &info))
			{
				#if defined(SDL_VIDEO_DRIVER_WINDOWS)
					return (void*)info.info.win.window;
				#endif
				#if defined(SDL_VIDEO_DRIVER_X11)
					return (void*)info.info.x11.window;
				#endif
				#if defined(SDL_VIDEO_DRIVER_DIRECTFB)
					return (void*)info.info.dfb.window;
				#endif
				#if defined(SDL_VIDEO_DRIVER_COCOA)
					return (void*)info.info.cocoa.window;
				#endif
				#if defined(SDL_VIDEO_DRIVER_UIKIT)
					return (void*)info.info.uikit.window;
				#endif
			}
			return NULL;
		}

	} //namespace SDL
} // namespace akj