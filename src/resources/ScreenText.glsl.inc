#include "akjStaticResources.hpp"

// a string literal containing the contents of ..\src\shaders\ScreenText.glsl
// made with akjToStaticString.exe

namespace akj {
	static const char* ScreenText_glsl = 
		"\n"
		"\n"
		"#define PI 3.14159265359\n"
		"#define PI2 6.28318530718\n"
		"#define PI_INV 0.318309886184\n"
		"#define SQRT2 1.41421356237\n"
		"\n"
		"vec3 GetLight(){\n"
		"	return vec3(15.0, 12.0, 30.0);\n"
		"}\n"
		"\n"
		"vec4 Red(){ return vec4(1.0, 0.0, 0.0, 1.0 );}\n"
		"vec4 Green(){ return vec4(0.0, 1.0, 0.0, 1.0 );}\n"
		"vec4 Blue(){ return vec4(0.0, 0.0, 1.0, 1.0 );}\n"
		"vec4 Yellow(){ return vec4(1.0, 1.0, 0.0, 1.0 );}\n"
		"\n"
		"float LinStep(const float bottom, const float top, const float val)\n"
		"{\n"
		"	return clamp((val-bottom)/(top-bottom), 0.0, 1.0 );\n"
		"}\n"
		"\n"
		"vec4 AlphaBlend(const vec4 top, const vec4 bottom)\n"
		"{\n"
		"\n"
		"	float max_a = max(top.a, bottom.a);\n"
		"	return vec4(mix(top.rgb, bottom.rgb, (max_a- top.a)/max_a ), max_a);\n"
		"}\n"
		"\n"
		"vec3 HueToRGB(float hue)\n"
		"{\n"
		"	vec3 s = vec3(1.0, -1.0, -1.0);\n"
		"	return sqrt(clamp(vec3(-1.0,2.0, 2.0)+s*abs(vec3(3.0, 2.0, 4.0 )+vec3(-hue*6.0)), 0.0, 1.0));\n"
		"}\n"
		"\n"
		"vec4 UnpackColor(uint color)\n"
		"{\n"
		"	uvec4 masks = uvec4(0x000000FF, 0x0000FF00, 0x00FF0000, 0xFF000000);\n"
		"	uvec4 shifts = uvec4(0, 8, 16, 24);\n"
		"	uvec4 cvec = (uvec4 (color, color, color, color) & masks) >> shifts;\n"
		"	return vec4(cvec)*vec4(0.00392157);\n"
		"}\n"
		"\n"
		"vec4 DebugColor()\n"
		"{\n"
		"	return vec4(1.0, 0.0, 1.0, 1.0);\n"
		"}\n"
		"vec3 rotate_by_quat(vec3 v, vec4 q)\n"
		"{\n"
		"	return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w*v );\n"
		"}\n"
		"vec3 reverse_rotate_by_quat(vec3 v, vec4 q)\n"
		"{\n"
		"	return v + 2.0 * cross(q.xyz, cross(q.xyz, v) - q.w*v );\n"
		"}\n"
		"vec3 Screen(vec3 color, vec3 light )\n"
		"{\n"
		"	return 1.0 - (1.0 - color)*(1.0 - light);\n"
		"}\n"
		"\n"
		"vec3 Overlay(vec3 color, vec3 light)\n"
		"{\n"
		"	vec3 ba = 2.0*light*color;\n"
		"	vec3 s = sign(ba-color);\n"
		"	return color+s*min(abs(ba-color), abs(2.0*Screen(color, light)-color));\n"
		"}\n"
		"vec3 Overlay(vec3 color, float light)\n"
		"{\n"
		"	return Overlay(color, vec3(light));\n"
		"}\n"
		"\n"
		"// special markup for shader parsing:\n"
		"\n"
		"#ifdef FRAGMENT_SHADER\n"
		"#define DEF_VARYING(qual, type, name) qual in type gs ## name;\n"
		"\n"
		"#elif defined(GEOMETRY_SHADER)\n"
		"#define DEF_VARYING(q, t, n) q in t vs ## n ## []; q out t gs ## n;\n"
		"\n"
		"#elif defined(VERTEX_SHADER)\n"
		"#define DEF_VARYING(qual, type, name) qual out type vs ## name;\n"
		"\n"
		"#endif\n"
		"\n"
		"#define geometry_main main\n"
		"#define vertex_main main\n"
		"#define fragment_main main \n"
		"\n"
		"#ifdef VERTEX_SHADER\n"
		"\n"
		"\n"
		"// per vertex attributes\n"
		"layout(location = 0) in vec2 aPos;\n"
		"\n"
		"#endif\n"
		"\n"
		"//////////////////////////////////////////////////////////////////\n"
		"// Shared Uniforms\n"
		"//////////////////////////////////////////////////////////////////\n"
		"\n"
		"\n"
		"uniform float uCurrentTime;\n"
		"\n"
		"#ifdef VERTEX_SHADER\n"
		"\n"
		"\n"
		"void vertex_main()\n"
		"{\n"
		"	gl_Position = (vec4(aPos, -0.1, 1.0));\n"
		"}\n"
		"#endif\n"
		"\n"
		"#ifdef FRAGMENT_SHADER\n"
		"\n"
		"uniform sampler2D uTextTexture;\n"
		"uniform sampler2D uPrimitiveTexture;\n"
		"uniform sampler2D uPrimitiveDepth;\n"
		"\n"
		"uniform vec4 uZoomOffset;\n"
		"\n"
		"\n"
		"in vec4 gl_FragCoord;\n"
		"out vec4 oFragColor;\n"
		"\n"
		"void fragment_main()\n"
		"{	\n"
		"	ivec2 sample_pos = ivec2(floor((gl_FragCoord.xy*uZoomOffset.xy)));\n"
		"	vec2 text_samp = texelFetch(uTextTexture, sample_pos, 0).rg;\n"
		"	float text_depth = 1.0-text_samp.g;\n"
		"	vec4 prim_samp = texelFetch(uPrimitiveTexture, sample_pos, 0);\n"
		"	float prim_depth = texelFetch(uPrimitiveDepth, sample_pos, 0).x;\n"
		"\n"
		"	float text_rgb = mix(1.0, 0.0, text_samp.r > 0.001);\n"
		"	vec4 text_color = vec4(text_rgb, text_rgb, text_rgb, max(text_samp.r, 0.0));\n"
		"	\n"
		"\n"
		"	//oFragColor = vec4(text_depth, text_depth, prim_depth, 1.0);\n"
		"	vec4 blended_color = mix(AlphaBlend(text_color, prim_samp),\n"
		"									 AlphaBlend(prim_samp, text_color), \n"
		"									 prim_depth > text_depth);\n"
		"	vec4 background_color = vec4(1.0);\n"
		"	oFragColor = mix(background_color, blended_color, min(prim_depth, text_depth) < 0.99 );\n"
		"	//	oFragColor = mix(Green(), Blue(), prim_depth > text_depth);\n"
		"}\n"
		"#endif\n";
}
