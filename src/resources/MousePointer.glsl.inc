#include "akjStaticResources.hpp"

// a string literal containing the contents of ..\src\shaders\MousePointer.glsl
// made with akjToStaticString.exe

namespace akj {
	static const char* MousePointer_glsl = 
		"#define PI 3.14159265359\n"
		"#define PI2 6.28318530718\n"
		"#define PI_INV 0.318309886184\n"
		"#define SQRT2 1.41421356237\n"
		"\n"
		"vec3 GetLight(){\n"
		"	return vec3(15.0, 12.0, 30.0);\n"
		"}\n"
		"\n"
		"vec3 HueToRGB(float hue)\n"
		"{\n"
		"	vec3 s = vec3(1.0, -1.0, -1.0);\n"
		"	return sqrt(clamp(vec3(-1.0,2.0, 2.0)+s*abs(vec3(3.0, 2.0, 4.0 )+vec3(-hue*6.0)), 0.0, 1.0));\n"
		"}\n"
		"\n"
		"vec4 DebugColor()\n"
		"{\n"
		"	return vec4(1.0, 0.0, 1.0, 1.0);\n"
		"}\n"
		"vec3 rotate_by_quat(vec3 v, vec4 q)\n"
		"{\n"
		"	return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w*v );\n"
		"}\n"
		"vec3 reverse_rotate_by_quat(vec3 v, vec4 q)\n"
		"{\n"
		"	return v + 2.0 * cross(q.xyz, cross(q.xyz, v) - q.w*v );\n"
		"}\n"
		"vec3 Screen(vec3 color, vec3 light )\n"
		"{\n"
		"	return 1.0 - (1.0 - color)*(1.0 - light);\n"
		"}\n"
		"\n"
		"vec3 Overlay(vec3 color, vec3 light)\n"
		"{\n"
		"	vec3 ba = 2.0*light*color;\n"
		"	vec3 s = sign(ba-color);\n"
		"	return color+s*min(abs(ba-color), abs(2.0*Screen(color, light)-color));\n"
		"}\n"
		"vec3 Overlay(vec3 color, float light)\n"
		"{\n"
		"	return Overlay(color, vec3(light));\n"
		"}\n"
		"\n"
		"uniform mat4 uProjectionMatrix;\n"
		"uniform vec2 uMousePosition;\n"
		"uniform float uCurrentTime;\n"
		"\n"
		"#ifdef VERTEX_SHADER\n"
		"layout(location = 0) in vec2 aPos;\n"
		"layout(location = 1) in vec2 aTexCoord;\n"
		"\n"
		"out vec2 vTexCoord;\n"
		"\n"
		"\n"
		"void main()\n"
		"{\n"
		"	vTexCoord = aTexCoord ;\n"
		"	gl_Position = uProjectionMatrix*(vec4(aPos+uMousePosition, -0.9, 1.0));\n"
		"}\n"
		"#endif\n"
		"\n"
		"\n"
		"#ifdef FRAGMENT_SHADER\n"
		"in vec2 vTexCoord;\n"
		"out vec4 oFragColor;\n"
		"\n"
		"uniform sampler2D uTexture0;\n"
		"\n"
		"void main()\n"
		"{	\n"
		"	oFragColor = texture2D(uTexture0, vTexCoord);\n"
		"}\n"
		"#endif\n";
}
